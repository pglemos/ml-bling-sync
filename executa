#!/bin/bash

# Script de automação para o projeto ML + Bling Sync
# Autor: Assistente de Programação
# Data: $(date)

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Função para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se o Git está instalado
check_git() {
    if ! command -v git &> /dev/null; then
        print_error "Git não está instalado. Por favor, instale o Git antes de continuar."
        exit 1
    fi
    print_success "Git está instalado"
}

# Verificar se o Node.js está instalado
check_node() {
    if ! command -v node &> /dev/null; then
        print_error "Node.js não está instalado. Por favor, instale o Node.js antes de continuar."
        exit 1
    fi
    print_success "Node.js $(node -v) está instalado"
}

# Verificar se o Docker está instalado (opcional)
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_warning "Docker não está instalado. Alguns recursos podem não funcionar corretamente."
        return 1
    fi
    print_success "Docker $(docker -v | cut -d' ' -f3 | cut -d',' -f1) está instalado"
    return 0
}

# Clonar o repositório
clone_repo() {
    REPO_URL="https://github.com/pglemos/ml-bling-sync.git"
    REPO_DIR="ml-bling-sync"
    
    if [ -d "$REPO_DIR" ]; then
        print_warning "Diretório $REPO_DIR já existe. Pulando clonagem."
        cd "$REPO_DIR"
        git pull
        print_success "Repositório atualizado"
    else
        print_status "Clonando repositório $REPO_URL..."
        git clone "$REPO_URL" || {
            print_error "Falha ao clonar o repositório"
            exit 1
        }
        cd "$REPO_DIR"
        print_success "Repositório clonado com sucesso"
    fi
}

# Instalar dependências do frontend
install_frontend_deps() {
    print_status "Instalando dependências do frontend..."
    
    if [ ! -f "package.json" ]; then
        print_warning "package.json não encontrado. Criando um novo..."
        cat > package.json << EOF
{
  "name": "ml-bling-sync-dashboard",
  "version": "1.0.0",
  "description": "Dashboard para ML + Bling Sync",
  "main": "dashboard.html",
  "scripts": {
    "start": "http-server -p 3000 -o",
    "dev": "http-server -p 3000 -o -c-1"
  },
  "devDependencies": {
    "http-server": "^14.1.1"
  }
}
EOF
    fi
    
    npm install || {
        print_error "Falha ao instalar dependências do frontend"
        exit 1
    }
    print_success "Dependências do frontend instaladas"
}

# Instalar dependências do backend (simulado)
install_backend_deps() {
    print_status "Configurando backend simulado..."
    
    # Criar diretório para o backend
    mkdir -p backend
    
    # Criar package.json para o backend
    cat > backend/package.json << EOF
{
  "name": "ml-bling-sync-api",
  "version": "1.0.0",
  "description": "API para ML + Bling Sync",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
EOF

    # Instalar dependências do backend
    cd backend
    npm install || {
        print_error "Falha ao instalar dependências do backend"
        exit 1
    }
    cd ..
    print_success "Dependências do backend instaladas"
}

# Criar arquivo de ambiente
create_env_file() {
    print_status "Criando arquivo de ambiente..."
    
    cat > .env << EOF
# Configurações do Ambiente
NODE_ENV=development
PORT=5000

# URLs
FRONTEND_URL=http://localhost:3000
API_BASE_URL=http://localhost:5000/api

# Mercado Livre
ML_CLIENT_ID=seu_ml_client_id
ML_CLIENT_SECRET=seu_ml_client_secret
ML_REDIRECT_URI=http://localhost:5000/auth/ml/callback

# Bling
BLING_API_KEY=sua_bling_api_key

# Banco de Dados
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=postgres
DB_NAME=ml_bling_sync

# Redis (para filas e cache)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# JWT
JWT_SECRET=seu_jwt_secret
JWT_EXPIRES_IN="7d"
EOF

    print_success "Arquivo .env criado. Por favor, edite-o com suas credenciais reais."
}

# Criar backend simulado
create_backend() {
    print_status "Criando backend simulado..."
    
    cat > backend/index.js << 'EOF'
const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middlewares
app.use(cors());
app.use(express.json());

// Dados simulados
let products = [
    { id: uuidv4(), name: 'iPhone 15 Pro Max', sku: 'TEST-001', price: 'R$ 8.999', status: 'Em Estoque', category: 'Celulares', marketplace: 'ml' },
    { id: uuidv4(), name: 'MacBook Air M3', sku: 'TEST-002', price: 'R$ 12.999', status: 'Em Estoque', category: 'Notebooks', marketplace: 'ml' },
    { id: uuidv4(), name: 'iPad Pro 12.9"', sku: 'TEST-003', price: 'R$ 7.499', status: 'Em Estoque', category: 'Tablets', marketplace: 'bling' }
];

let integrations = {
    ml: {
        valid: true,
        apiWorking: true,
        productsSynced: true,
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        scopes: ['read', 'write', 'offline_access']
    },
    bling: {
        valid: true,
        apiWorking: true,
        categoriesCreated: true,
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        scopes: ['read', 'write']
    }
};

let logs = [
    { id: uuidv4(), level: 'info', message: 'Sistema iniciado com sucesso', timestamp: new Date().toISOString(), jobId: null },
    { id: uuidv4(), level: 'info', message: 'Sincronização iniciada', timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(), jobId: 'sync-123' },
    { id: uuidv4(), level: 'success', message: '3 produtos processados', timestamp: new Date(Date.now() - 3 * 60 * 1000).toISOString(), jobId: 'sync-123' },
    { id: uuidv4(), level: 'warning', message: 'Alguns produtos com IDs fictícios', timestamp: new Date(Date.now() - 1 * 60 * 1000).toISOString(), jobId: 'sync-123' }
];

// Rotas da API
app.get('/api', (req, res) => {
    res.json({ message: 'API do ML + Bling Sync funcionando!' });
});

app.get('/api/products', (req, res) => {
    res.json({ products });
});

app.post('/api/add-test-products', (req, res) => {
    const newProducts = [
        { id: uuidv4(), name: 'Samsung Galaxy S24', sku: 'TEST-004', price: 'R$ 6.999', status: 'Em Estoque', category: 'Celulares', marketplace: 'ml' },
        { id: uuidv4(), name: 'Dell XPS 15', sku: 'TEST-005', price: 'R$ 15.999', status: 'Em Estoque', category: 'Notebooks', marketplace: 'bling' }
    ];
    
    products = [...products, ...newProducts];
    res.json({ message: 'Produtos de teste adicionados', count: newProducts.length });
});

app.get('/api/integrations/status', (req, res) => {
    res.json(integrations);
});

app.get('/api/check-integrations', (req, res) => {
    // Simular verificação
    setTimeout(() => {
        res.json({ 
            ml: { ...integrations.ml, valid: Math.random() > 0.2 },
            bling: { ...integrations.bling, valid: Math.random() > 0.2 }
        });
    }, 1000);
});

app.get('/api/sync', (req, res) => {
    // Simular sincronização
    res.json({ message: 'Sincronização iniciada' });
});

app.get('/api/sync/stream', (req, res) => {
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');
    
    let progress = 0;
    const interval = setInterval(() => {
        progress += 10;
        
        if (progress <= 100) {
            res.write(`data: ${JSON.stringify({
                progress: {
                    percentage: progress,
                    eta: progress < 100 ? `${Math.floor((100 - progress) / 10)} segundos` : 'Concluído',
                    items: [
                        { name: 'Categorias', status: progress >= 30 ? 'completed' : 'processing' },
                        { name: 'Produtos', status: progress >= 70 ? 'completed' : progress >= 30 ? 'processing' : 'pending' },
                        { name: 'Imagens', status: progress >= 100 ? 'completed' : progress >= 70 ? 'processing' : 'pending' }
                    ]
                },
                message: `Progresso: ${progress}%`,
                type: 'info'
            })}\n\n`);
        } else {
            res.write(`data: ${JSON.stringify({
                completed: true,
                message: 'Sincronização concluída com sucesso!',
                type: 'success'
            })}\n\n`);
            clearInterval(interval);
            res.end();
        }
    }, 1000);
    
    req.on('close', () => {
        clearInterval(interval);
        res.end();
    });
});

app.get('/api/logs', (req, res) => {
    const { limit = 200, level, jobId } = req.query;
    let filteredLogs = [...logs];
    
    if (level) {
        filteredLogs = filteredLogs.filter(log => log.level === level);
    }
    
    if (jobId) {
        filteredLogs = filteredLogs.filter(log => log.jobId === jobId);
    }
    
    filteredLogs = filteredLogs.slice(0, parseInt(limit));
    
    res.json({ logs: filteredLogs });
});

app.get('/api/metrics', (req, res) => {
    res.json({
        productsCount: products.length,
        pendingCount: Math.floor(Math.random() * 5),
        lastSync: 'Agora',
        syncCount: products.length + Math.floor(Math.random() * 100)
    });
});

// Iniciar servidor
app.listen(PORT, () => {
    console.log(`Servidor backend rodando em http://localhost:${PORT}`);
});
EOF

    print_success "Backend simulado criado"
}

# Criar arquivo docker-compose.yml
create_docker_compose() {
    print_status "Criando arquivo docker-compose.yml..."
    
    cat > docker-compose.yml << EOF
version: '3.8'

services:
  frontend:
    build: .
    ports:
      - "3000:3000"
    environment:
      - API_BASE_URL=http://backend:5000/api
    depends_on:
      - backend
    networks:
      - ml-bling-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=ml_bling_sync
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - ml-bling-network

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ml_bling_sync
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ml-bling-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ml-bling-network

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=ml_bling_sync
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - ml-bling-network

volumes:
  postgres_data:
  redis_data:

networks:
  ml-bling-network:
    driver: bridge
EOF

    print_success "Arquivo docker-compose.yml criado"
}

# Criar Dockerfile para o frontend
create_frontend_dockerfile() {
    print_status "Criando Dockerfile para o frontend..."
    
    cat > Dockerfile << EOF
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]
EOF

    print_success "Dockerfile do frontend criado"
}

# Criar Dockerfiles para o backend
create_backend_dockerfiles() {
    print_status "Criando Dockerfiles para o backend..."
    
    # Dockerfile principal
    cat > backend/Dockerfile << EOF
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 5000

CMD ["npm", "start"]
EOF

    # Dockerfile para o worker
    cat > backend/Dockerfile.worker << EOF
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

CMD ["node", "worker.js"]
EOF

    # Criar arquivo worker.js
    cat > backend/worker.js << 'EOF'
console.log('Worker iniciado');
// Aqui entraria a lógica do worker para processar filas
EOF

    print_success "Dockerfiles do backend criados"
}

# Iniciar os serviços
start_services() {
    print_status "Iniciando serviços..."
    
    # Iniciar backend em segundo plano
    cd backend
    npm start &
    BACKEND_PID=$!
    cd ..
    
    # Aguardar backend iniciar
    sleep 3
    
    # Iniciar frontend
    npm start &
    FRONTEND_PID=$!
    
    print_success "Serviços iniciados:"
    print_success "Frontend: http://localhost:3000"
    print_success "Backend: http://localhost:5000"
    
    # Abrir navegador
    if command -v open &> /dev/null; then
        open http://localhost:3000
    elif command -v xdg-open &> /dev/null; then
        xdg-open http://localhost:3000
    fi
    
    # Aguardar sinais de interrupção
    trap "print_status 'Parando serviços...'; kill $BACKEND_PID $FRONTEND_PID; exit 0" INT TERM
    
    # Manter script rodando
    print_status "Pressione Ctrl+C para parar os serviços"
    while true; do
        sleep 1
    done
}

# Função principal
main() {
    print_status "Iniciando configuração do projeto ML + Bling Sync..."
    
    # Verificar pré-requisitos
    check_git
    check_node
    check_docker
    
    # Clonar repositório
    clone_repo
    
    # Instalar dependências
    install_frontend_deps
    install_backend_deps
    
    # Criar arquivos de configuração
    create_env_file
    create_backend
    create_docker_compose
    create_frontend_dockerfile
    create_backend_dockerfiles
    
    print_success "Configuração concluída!"
    print_status "Para iniciar os serviços, execute:"
    print_status "  npm run dev (para frontend)"
    print_status "  cd backend && npm run dev (para backend)"
    print_status "Ou use Docker:"
    print_status "  docker-compose up"
    
    # Perguntar se deseja iniciar os serviços
    read -p "Deseja iniciar os serviços agora? (s/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        start_services
    else
        print_success "Configuração concluída. Execute o script novamente quando desejar iniciar os serviços."
    fi
}

# Executar função principal
main